#!/bin/bash

set -e

# cross build --target=armv7-unknown-linux-musleabihf --release --features raspberrypi3

VERBOSE=1

DEVICE_TYPES="intel-nuc raspberrypi3"

function verbose {
  if [ "${VERBOSE}" == 1 ]; then
    echo "${1}"
  fi
}

function fail {
  echo "${1}"
  # clean
  exit 1
}

function dir_size { ls -FGl "${@}" | grep -v ".*\.yml" | awk '{ total += $4 }; END { print total }'; }

function printHelp {
  cat << EOI

  mk_migrator - create a migration executables
    USAGE mk_migrator [OPTIONS]
    OPTIONS:
      -h|--help                              - print this help text
      -d|--device device-slug                - use specified device slug, one of $DEVICE_TYPES
EOI
  return  0
}


CURR_DIR=$(pwd)

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
PROJECT_ROOT="$( cd "$( dirname "$SCRIPT_DIR" )" >/dev/null 2>&1 && pwd )"
verbose "Using project root: $PROJECT_ROOT"

while [[ $# -gt 0 ]]; do
  arg=$1
  case $arg in
      -h|--help)
        printHelp
        exit 0
      ;;
      -d|--device)
          if [ -z "$2" ]; then
            fail "\"$1\" argument needs a value."
          fi
          DEVICE_TYPE="$2"
          shift
      ;;
  esac
  shift
done

cd "$PROJECT_ROOT"



BUILD_DIR="$PROJECT_ROOT/build_assets"
if [ -d "$BUILD_DIR" ] ; then
  verbose "deleting $BUILD_DIR"
  sudo rm -rf "$BUILD_DIR"
fi

mkdir -p "$BUILD_DIR"
BUILD_TMP="$BUILD_DIR/tmp"

case $DEVICE_TYPE in
  intel-nuc)
    verbose "calling 'cross build --target=x86_64-unknown-linux-musl --release --bin balena-stage2'"
    cross build --target=x86_64-unknown-linux-musl --release --bin balena-stage2
    verbose "Creating initrd in $BUILD_DIR"
    sudo $SCRIPT_DIR/mk_mig_config --no-copy-migrator --device $DEVICE_TYPE --target-dir $BUILD_TMP
    OWNER="${USER}.$(id -gn)"
    sudo chown "${OWNER}" $BUILD_TMP/*
    ASSET_SIZE=$(dir_size "$BUILD_TMP")
    echo "asset_size: $ASSET_SIZE" >> "$BUILD_TMP/version.yml"
    tar --exclude='*.yml' -czf $BUILD_DIR/assets.tgz -C $BUILD_TMP .
    if [ -f "$PROJECT_ROOT/target/x86_64-unknown-linux-musl/release/balena-migrate" ] ; then
      verbose "deleting $PROJECT_ROOT/target/x86_64-unknown-linux-musl/release/balena-migrate"
      rm "$PROJECT_ROOT/target/x86_64-unknown-linux-musl/release/balena-migrate"
    fi
    verbose "calling 'cross build --target=x86_64-unknown-linux-musl --release --bin balena-migrate'"
    cross build --target=x86_64-unknown-linux-musl --release --bin balena-migrate
    ;;
  raspberrypi3)
    verbose "calling 'cross build --target=armv7-unknown-linux-musleabihf --release --bin balena-stage2'"
    cross build --target=armv7-unknown-linux-musleabihf --release --bin balena-stage2

    verbose "Creating initrd in $BUILD_DIR"
    sudo $SCRIPT_DIR/mk_mig_config --no-copy-migrator --device $DEVICE_TYPE --target-dir $BUILD_TMP
    OWNER="${USER}.$(id -gn)"
    sudo chown "${OWNER}" $BUILD_TMP/*
    ASSET_SIZE=$(dir_size "$BUILD_TMP")
    echo "asset_size: $ASSET_SIZE" >> "$BUILD_TMP/version.yml"

    tar --exclude='*.yml' -czf $BUILD_DIR/assets.tgz -C $BUILD_TMP .
    if [ -f "$PROJECT_ROOT/target/armv7-unknown-linux-musleabihf/release/balena-migrate" ] ; then
      verbose "deleting $PROJECT_ROOT/target/armv7-unknown-linux-musleabihf/release/balena-migrate"
      rm "$PROJECT_ROOT/target/armv7-unknown-linux-musleabihf/release/balena-migrate"
    fi

    verbose "calling 'cross build --target=armv7-unknown-linux-musleabihf --release --bin balena-migrate'"
    cross build --target=armv7-unknown-linux-musleabihf --release --bin balena-migrate
    ;;
    *)
      fail "please specify a valid device type"
    ;;
esac
