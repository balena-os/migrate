migrate:
  ## migrate mode
  ## 'immediate' migrate
  ## 'pretend' : just run stage 1 without modifying anything
  ## 'extract' : do not migrate extract image instead
  mode: immediate
  ## where required files are expected
  work_dir: .
  ## migrate all found wifi configurations
  all_wifis: true
  ## automatically reboot into stage 2 after n seconds
  reboot: 5
  log:
    ## use this drive for stage2 persistent logging
    # drive:
    #   devpath: '/dev/sda1'
    ## or
    #   uuid: 42D3-AAB8
    ## or
    #   partuuid: ea85e980-ee1a-464a-928a-dde13eec7e83

    ## stage2 log level (trace, debug, info, warn, error)
    level: debug
  # path to stage2 kernel - must be a balena os kernel matching the device type
  ## backup configuration, configured files are copied to balena and mounted as volumes
  backup:
  ## network manager configuration files
  nwmgr_files:
    # - eth0_static

  ## Extra kernel commandline options
  # kernel_opts: "panic=20"

  ## delay migration by n seconds - workaround for watchdog not disabling
  # delay: 60

  ## Use internal (rust module) or external (system provided tar executable) tar archiver
  # tar_internal: false

  ## Provide md5 sums to check input file consistency
  # md5_sums: md5sums.txt

  ## Determine what to do on stage2 failure
  ##  either reboot  - reboot device
  ##  or rescueshell - start a shell
  # fail_mode: reboot

  ## by default migration requires some network manager config to be present (eg from wlan or supplied)
  ## set this to false to not require connection files
  require_nwmgr_config: false
balena:
  image:
    ## use dd / flash balena image
    dd: <insert image to flash>
  ## config.json file to inject
  config: config.json
  ## application name
  # app_name: <insert application name>
  ## api checks
  ## check for vpn connection
  # check_api: true
  ## check for vpn connection
  # check_vpn: true
  ## timeout for checks
  # check_timeout: 20
debug:
  ## don't flash device - terminate stage2 and reboot before flashing
  no_flash: true
  ## use internal gzip with dd true | false
  # gzip_internal: true
  ## Use the given device instead of the boot device to flash to
  # force_flash_device: /dev/sda
